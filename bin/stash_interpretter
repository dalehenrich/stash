#!/usr/bin/env bash
#
#	command line interpretter for stash script
#	
#	arguments up to the first -- are interpreted as arguments to 
#		command-line interpreter
#	arguments after the first -- are passed to the smalltalk
#		$GS_HOME/bin/startTopaz.
#

#	echo "0: $@"
stashFile=`realpath $1`
shift

debug="false"
if [ "$1" = "-D" ] ; then
	# hack .. for now
	debug="true"
	shift
fi

pwd=`pwd`
# StashScript class will do it's own parsing of the command line args (in Smalltalk)
#		just stripping out topaz arguments
stashArgs="$*" 
topazArgs="$GEMSTONE_SCRIPT_ARGS"
startTopaz="false"
#	echo "1: $@"
for argument in $@ ; do
	echo "===>$argument"
	if [ "$argument" = "--" ] ; then
		startTopaz="true"
		topazArgs=""
	else
		if [ "${startTopaz}" = "true" ] ; then
			topazArgs+=" $argument"
		fi
	fi
done

	echo "topaz args: $topazArgs"
	echo "stash args: $stashArgs"

file=`mktemp`
logFile=`mktemp`

echo "log file: $logFile"

cat - > $file << EOF

	output push $logFile only
	set INPUTPAUSEONERROR on
	iferr 1 stk
#	iferr 2 stack

	set u SystemUser p swordfish
	login

	print
	^ StashScript
			loadAndExecuteScriptClassFile:: '$stashFile'
			stashArgs: '$stashArgs'
			topazArgs: '$topazArgs'
			workingDir: '$pwd'
%

	output pop
	obj1 **
	EXITIFNOERROR

EOF

if [ "${topazArgs}x" = "x" ] ; then
	echo "missing startTopaz command line args (stoneName -lq)"
	echo "	export GEMSTONE_SCRIPT_ARGS=\"<stone-name> -lq\""
	exit 1
fi

if [ "$debug" = "true" ] ; then
		echo "INPUT $file"
		$GS_HOME/bin/startTopaz $topazArgs
	else
		$GS_HOME/bin/startTopaz $topazArgs << EOF
		input $file
EOF
	status="$?"
	if [ "$status" != 0 ] ; then
		cat $logFile
		exit $status
	fi
fi
