#!/usr/bin/env bash
#
#	command line interpretter for smalltalk script GemStone 3.5.0 and beyond
#	
#	arguments up to the first -- are interpreted as arguments to 
#		command-line interpreter
#	arguments after the first -- are passed to the smalltalk
#		$GS_HOME/bin/startTopaz.
#

#	echo "0: $@"
stashFile=`realpath $1`
shift

pwd=`pwd`
# StashScript class will do it's own parsing of the command line args (in Smalltalk)
#		just stripping out topaz arguments
stashArgs="$*" 
startTopaz="false"
#	echo "1: $@"
for argument in $@ ; do
#	echo "===>$argument"
	if [ "$argument" = "--" ] ; then
		startTopaz="true"
		topazArgs=""
	else
		if [ "${startTopaz}" = "true" ] ; then
			topazArgs+=" $argument"
		fi
	fi
done

file=`mktemp`

#	echo "stash args: $stashArgs"
#	echo "script file : $stashFile"
#	echo "topaz args: $topazArgs"
#	echo "topaz file : $file"


cat - > $file << EOF
	iferr 1 stk

	$solo
	login

	run
	StashScript
			loadAndExecuteScriptClassFile: '$stashFile'
			stashArgs: '$stashArgs'
			topazArgs: '$topazArgs'
			workingDir: '$pwd'
			projectName: '__EXECUTE_STASH_SCRIPT_PROJECT__'
			packageName: '__EXECUTE_STASH_SCRIPT_PACKAGE__'
			symDictName: '_EXECUTE_STASH_SCRIPT_SymbolDict__'
%
EOF

if [ "$GS_HOME"x = "x" ] ; then
	# GEMSTONE installation
	if [ "$GEMSTONE"x = "x" ] ; then
		echo "\$GEMSTONE env variable not defined"
		exit 1
	fi
	topazCommand=$GEMSTONE/bin/topaz
else
	# GsDevKit_home installattion
	if [ "${topazArgs}"x = "x" ] ; then
		echo "missing startTopaz command line args (stoneName -lq)"
		exit 1
	fi
	topazCommand=$GS_HOME/bin/scriptTopaz
fi

$topazCommand $topazArgs -S $file
